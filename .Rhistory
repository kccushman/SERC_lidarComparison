lidR::readLASheader("/Volumes/KC_JPL/NGEE-T/BCI_spatial/pointClouds/1_raw/photo_2020/BCI_whole_2020_07_31_cloud_dipteryx.laz")
lidR::readLASheader("/Volumes/KC_JPL/NGEE-T/BCI_spatial/pointClouds/1_raw/photo_2021/BCI_whole_2021_06_29_cloud_dipteryx.laz")
2024-1988
# rm(list = ls())
# Load the required library
library(INLA)
# Im using version INLA_24.02.09
# In some versions, you need to enable the use of the 'weights' argument in the
# 'inla' function. This is done by setting:
# inla.setOption("enable.inla.argument.weights", TRUE)
# They do this to avoid misinterpretation or misuse of the argument. For the
# case of analyzing replicated data, using weights is the right option as shown
# below.
# Simulating simple Bernoulli model but replicating data
# Set seed for reproducibility
set.seed(10)
# Number of observations
n <- 600
# Number of replications
repn <- 100
# Create IDs for each observation
id <- 1:n
# Generate predictor variable 'x' from uniform distribution
x <- runif(n)
# Generate linear predictor 'eta' based on 'x'
eta <- 0.5 + 0.3 * x
# Calculate probability parameter 'p' using logistic function
p <- plogis(eta)
# Simulate response variable 'y' from a Bernoulli distribution with probability 'p'
y <- rbinom(n, 1, p)
# Create a small dataframe with 'y', 'x', and 'id'
small_df <- data.frame(y, x, id)
# Replicate the small dataframe 'repn' times to create a big dataframe
big_df <- data.frame(y = rep(y, repn), x = rep(x, repn), id = rep(id, repn))
# Add weights to the big dataframe, with each observation having a weight of 1/repn
big_df$w <- 1 / repn
# Fit the first model (i0) without weights using the small dataframe
i0 <- inla(
y ~ x,
Ntrials = 1,
data = small_df,
family = "binomial",
control.predictor = list(compute = TRUE),
control.fixed = list(
correlation.matrix = TRUE
)
)
summary(i0)
i0$misc$lincomb.derived.covariance.matrix
str(small_df)
str(big_df)
i1 <- inla(
y ~ x,
Ntrials = 1,
data = big_df,
family = "binomial",
control.predictor = list(compute = TRUE),
control.fixed = list(
correlation.matrix = TRUE
)
)
summary(i1)
# Compare derived covariance matrices between i0 and i1
i0$misc$lincomb.derived.covariance.matrix /
i1$misc$lincomb.derived.covariance.matrix
i0$misc$lincomb.derived.covariance.matrix /
i1$misc$lincomb.derived.covariance.matrix
i0$misc$lincomb.derived.covariance.matrix
i1$misc$lincomb.derived.covariance.matrix
w
hist(big_df$w)
unique(big_df$w)
repn
i2 <- inla(
y ~ x,
Ntrials = 1,
weights = w,
data = big_df,
family = "binomial",
control.predictor = list(compute = TRUE),
control.fixed = list(
correlation.matrix = TRUE
)
)
summary(i2)
i0$misc$lincomb.derived.covariance.matrix /
i2$misc$lincomb.derived.covariance.matrix
i2$misc$lincomb.derived.covariance.matrix
874.62/3
?lidR::clip_roi
install.packages("aRchi")
install.packages("remotes")
remotes::install_github('umr-amap/aRchi')
remotes::install_github('umr-amap/aRchi')
`gitcreds::gitcreds_set()`
gitcreds::gitcreds_set()
usethis::create_github_token()
gitcreds::gitcreds_set(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)
gitcreds::gitcreds_set()
remotes::install_github('umr-amap/aRchi')
library(aRchi)
?aRchi::skeletonize_pc
?aRchi::segment_annual_shoots
?aRchi::segment_annual_shoots
library(terra)
library(lidR)
library(parallel)
library(sf) #is this needed still?
source("scripts/mod2a_funs.R")
50^2
180/19
180/18
?lidR::rumple_index
?lidR::gap_fraction_profile
5/18.
4/17.
500/20
25*150
26*151
setwd("/Volumes/KC_JPL/site_data/mpala")
coords <- read.csv("shp/Mpala topodata.csv")
?terra::vect
names(coords)
coordsVect <- terra::vect(coords, geom=c("East","North"),
crs = "epsg: 4326", keepgeom=T)
terra::plot(coordsVect)
terra::plot(coordsVect, pch=19, cex=0.5)
terra::plot(coordsVect, pch=19, cex=0.2)
coordsVect <- terra::vect(coords, geom=c("East","North"),
crs = "epsg: 32736", keepgeom=T)
terra::plot(coordsVect, pch=19, cex=0.2)
terra::writeVector(coordsVect,"shp/MpalaPlotCoords.shp")
setwd("/Volumes/KC_JPL/site_data/kruger")
setwd("/Volumes/KC_JPL/site_data/kruger")
coords <- read.csv("KNP-NISAR-2023/_KC analysis/QuadratDataFromMastercopy.csv")
names(coords)
head(coords)
coordsVect <- terra::vect(coords[,c("Plot","Average.Latitude","Average.Longitude")], geom=c("Average.Longitude","Average.Latitude"),
crs = "epsg: 4326", keepgeom=T)
terra::writeVector(coordsVect,"shp/KrugerPlotCenters.shp")
plot(coordsVect)
terra::plot(coordsVect)
test <- terra::vect("/Volumes/KC_JPL/site_data/leno/shp/plot_boundaries/LENO_20m_plots.shp")
names(test)
test$plotID
test$plotID20
test <- terra::vect("/Volumes/KC_JPL/site_data/mondah/shapefiles/AfriSAR_plots_SHP/AfriSAR_1ha_plots.shp")
names(test)
unique(test$Site)
unique(test$Plot_code)
test <- terra::vect("/Volumes/KC_JPL/site_data/mondah/shapefiles/AfriSAR_plots_SHP/AfriSAR_025ha_plots.shp")
unique(test$Plot_code)
names(test)
names(test$agb_loc)
head(test)
test$Plot_code
test[test$Plot_code=="MON01"]
library("lidR")
rootDir <- "/Volumes/KC_JPL/SERC_lidar/"
library("lidR")
rootDir <- "/Volumes/KC_JPL/SERC_lidar/"
library("lidR")
library("sf")
getwd()
als_ha4 <- catalog("/Volumes/KC_JPL/SERC_lidar/ha4/als_ha4_clean.laz")
drone_leafOff <-   catalog("/Volumes/KC_JPL/SERC_lidar/GatorEye/Original_LeafOff/GatorEye_SubjectTerms_20201118-163805_final_height_z_merged.las")
als_ha4
drone_leafOff
plot(extent(als_ha4))
terra::plot(extent(als_ha4))
plot(als_ha4)
?lidR::clip_roi
drone_leafOff_ha4 <- clip_roi(drone_leafOff,extent(als_ha4))
drone_leafOff_ha4 <- clip_roi(drone_leafOff,ext(als_ha4))
drone_leafOff_ha4 <- clip_roi(drone_leafOff,lidR::ext(als_ha4))
drone_leafOff_ha4 <- clip_roi(drone_leafOff,terra::ext(als_ha4))
lidR::ext)als_ha4
drone_leafOff_ha4 <- clip_roi(drone_leafOff,als_ha4)
lidR::ext(als_ha4)
?lidR::`ext,LAScatalog-method`
drone_leafOff_ha4 <- clip_roi(drone_leafOff,st_bbox(als_ha4))
opt_output_files(drone_leafOff_ha4) <- "/Volumes/KC_JPL/SERC_lidar/drone_ha4_leafOff_align"
drone_leafOff_ha4
drone_align <- decimate_points(drone_leafOff_ha4, algorithm=highest(res=0.5))
writeLAS(drone_leafOff_ha4,"/Volumes/KC_JPL/SERC_lidar/GatorEye/drone_leafoff_ha4.laz")
drone_leafoff <- catalog("/Volumes/KC_JPL/SERC_lidar/drone_leafoff_ha4.laz")
drone_leafoff <- catalog("/Volumes/KC_JPL/SERC_lidar/GatorEye/drone_leafoff_ha4.laz")
crs(drone_leafoff) <- "epsg:32618"
opt_output_files(drone_leafoff) <- "/Volumes/KC_JPL/SERC_lidar/drone_ha4_leafoff_align"
opt_laz_compression(drone_leafoff) <- T
drone_align <- decimate_points(drone_leafoff, algorithm=highest(res=0.5))
30^2
30^2*190000/10000
# Subset a common "slice" from all point clouds
library("lidR")
rootDir <- "/Volumes/KC_JPL/SERC_lidar/"
ulsOffFile <- paste0(rootDir,"drone_leafoff_ha4_alignedToALS.laz")
ulsOffFile <- catalog(ulsOffFile)
rootDir <- "/Volumes/KC_JPL/SERC_lidar/ha4/"
ulsOffFile <- paste0(rootDir,"drone_leafoff_ha4_alignedToALS.laz")
ulsOffFile <- catalog(ulsOffFile)
ulsOffFile <- paste0(rootDir,"drone_leafoff_ha4_alignedToALS.las")
ulsOffFile <- catalog(ulsOffFile)
transectP1 <- c(364560,4305790)
transectP2 <- c(364640,4305790)
transectWidth <- 5
ulsOffFile <- paste0(rootDir,"drone_leafoff_ha4_alignedToALS.las")
ulsOffCat <- catalog(ulsOffFile)
ulsOffSub <-   clip_transect(ulsOffCat, p1 = transectP1, p2 = transectP2, width = transectWidth)
writeLAS(ulsOffSub,"/Volumes/KC_JPL/SERC_lidar/transect_drone_leafoff.laz")
writeLAS(ulsOffSub,"/Volumes/KC_JPL/SERC_lidar/transect/transect_drone_leafoff.laz")
doathing(1)
pi*(12.8/2)^2
pi*((12.8/2))^2
8*12
66.44*2
400000*30*30/10000
340-205+50
340+80-205
340+110-205
340+100-205
340+65+205
340+65-205
plot60 <- terra::vect("OneDrive - Oak Ridge National Laboratory/DSFP/AAMU/grid20m.kmz")
plot60 <- terra::vect("OneDrive - Oak Ridge National Laboratory/DSFP/AAMU/grid20m.shp")
terra::plot(plot60)
plot60 <- terra::aggregate(plot60)
terra::plot(plot60)
plot60
terra::plot(plot60)
plot20 <- terra::vect("OneDrive - Oak Ridge National Laboratory/DSFP/AAMU/PRplot.shp")
10000*20/(25*20)
10000*20/(25*20)/20
127*3
?lidR::highest
round(100*(61.7-53.5)53.5),0)
round(100*(61.7-53.5)/53.5),0)
round(100*(61.7-53.5)/53.5)
round(100*(63.1-53.5)/53.5)
round(100*(2001-1892)/1892)
round(100*(1900-1892)/1892)
round(100*(2001-1892)/1892,1)
round(100*(1900-1892)/1892,1)
round(100*(61.7-53.5)/53.5,1)
round(100*(63.1-53.5)/53.5,1)
round(100*(454-450)/450,1)
round(100*(537-450)/450,1)
1628+5177+118260
getwd()
setwd("~/Documents/GitHub/SERC_lidarComparison")
data2a <- read.csv("Data/GEDI/data_GEDI2_A.csv")
data2a$shot_number <- read.csv("Data/GEDI/data_GEDI2_A_shot_number.csv",colClasses = "character")[,1]
data2b <- read.csv('Data/GEDI/data_GEDI2_B.csv')
data2b$shot_number <- read.csv("Data/GEDI/data_GEDI2_B_shot_number.csv",colClasses = "character")[,1]
data1b <- read.csv('Data/GEDI/data_GEDI1_B.csv')
data1b$shot_number <- read.csv("Data/GEDI/data_GEDI1_B_shot_number.csv",colClasses = "character")[,1]
years <- unique(data2a$year)
gediSummary <- data.frame(year = c("All",years),
nAll = NA,
nGood = NA,
nGoodOn = NA)
gediSummary[gediSummary$year=="All","nAll"] <- nrow(data2a)
gediSummary[gediSummary$year=="All","nGood"] <- nrow(data2a[data2a$quality_flag==1,])
gediSummary[gediSummary$year=="All","nGoodOn"] <- nrow(data2a[data2a$quality_flag==1 & data2a$leaf_off_flag=="00",])
for(i in 1:length(years)){
gediSummary[gediSummary$year==years[i],"nAll"] <- nrow(data2a[data2a$year==years[i],])
gediSummary[gediSummary$year==years[i],"nGood"] <- nrow(data2a[data2a$year==years[i] & data2a$quality_flag==1,])
gediSummary[gediSummary$year==years[i],"nGoodOn"] <- nrow(data2a[data2a$year==years[i] & data2a$quality_flag==1 & data2a$leaf_off_flag=="00",])
}
gediSummary
# turn data into spatial object
data2aSp <- vect(data2a, geom=c("lon_lowestmode", "lat_lowestmode"), crs="epsg:4326", keepgeom=FALSE)
library(terra); library(lidR); library(sf)
# turn data into spatial object
data2aSp <- vect(data2a, geom=c("lon_lowestmode", "lat_lowestmode"), crs="epsg:4326", keepgeom=FALSE)
# get ha 4 outline
cat_ha4 <- catalog("Data/ha4/als_ha4.laz")
extent4_utm <- vect(ext(cat_ha4),crs="epsg:32618")
extent4_latLon <- project(extent4_utm,"epsg:4326")
mainCex=0.7
labCex=0.8
par(mfrow=c(2,2),las=1,mar=c(0,0,0,0),oma=c(2,2,1,1))
plot(data2aSp,
mar=c(1,1,1,1),
pax=list(lab=2),
pch=20,
cex=0.3,
las=1,
col=adjustcolor("black",0.2))
mtext("All data", side=3, outer=F, cex = mainCex)
plot(data2aSp[data2aSp$quality_flag==1,],
mar=c(1,1,1,1),
pax=list(lab=0),
pch=20,
cex=0.3,
las=1,
col=adjustcolor("black",0.2))
# turn GEDI data frame into spatial object
data2aSp <- vect(data2a, geom=c("lon_lowestmode", "lat_lowestmode"), crs="epsg:4326", keepgeom=FALSE)
# get ha 4 outline
cat_ha4 <- catalog("Data/ha4/als_ha4.laz")
extent4_utm <- vect(ext(cat_ha4),crs="epsg:32618")
extent4_latLon <- project(extent4_utm,"epsg:4326")
# SERC NEON site
mainCex=0.7
labCex=0.8
# First, make a plot for the whole SERC NEON site
jpeg(filename = "Figures/GEDI_sercSite.jpeg",
width = 1100, height = 1200, units = "px", pointsize = 36,
quality = 300)
par(mfrow=c(2,2),las=1,mar=c(0,0,0,0),oma=c(2,2,1,1))
plot(data2aSp,
mar=c(1,1,1,1),
pax=list(lab=2),
pch=20,
cex=0.3,
las=1,
col=adjustcolor("black",0.2))
mtext("All data", side=3, outer=F, cex = mainCex)
plot(data2aSp[data2aSp$quality_flag==1,],
mar=c(1,1,1,1),
pax=list(lab=0),
pch=20,
cex=0.3,
las=1,
col=adjustcolor("black",0.2))
mtext("Good quality data", side=3, outer=F, cex = mainCex)
plot(data2aSp[data2aSp$quality_flag==1 & data2a$leaf_off_flag=="00",],
mar=c(1,1,1,1),
pax=list(lab=1:2),
pch=20,
cex=0.3,
las=1,
col=adjustcolor("black",0.2))
mtext("Good quality leaf on data", side=3, outer=F, cex = mainCex)
plot(data2aSp[data2aSp$quality_flag==1 & data2a$leaf_off_flag=="00" & data2a$year=="2021",],
mar=c(1,1,1,1),
pax=list(lab=1),
pch=20,
cex=0.3,
las=1,
col=adjustcolor("black",0.2))
mtext("2021 Good quality leaf on data", side=3, outer=F, cex = mainCex)
mtext("Latitude (deg)", side=2, outer=T, cex = labCex, las=0, line=1)
mtext("Longitude (deg)", side=1, outer=T, cex = labCex, line=0)
dev.off()
jpeg(filename = "Results/GEDI_sercSite.jpeg",
width = 1100, height = 1200, units = "px", pointsize = 36,
quality = 300)
par(mfrow=c(2,2),las=1,mar=c(0,0,0,0),oma=c(2,2,1,1))
plot(data2aSp,
mar=c(1,1,1,1),
pax=list(lab=2),
pch=20,
cex=0.3,
las=1,
col=adjustcolor("black",0.2))
mtext("All data", side=3, outer=F, cex = mainCex)
plot(data2aSp[data2aSp$quality_flag==1,],
mar=c(1,1,1,1),
pax=list(lab=0),
pch=20,
cex=0.3,
las=1,
col=adjustcolor("black",0.2))
mtext("Good quality data", side=3, outer=F, cex = mainCex)
plot(data2aSp[data2aSp$quality_flag==1 & data2a$leaf_off_flag=="00",],
mar=c(1,1,1,1),
pax=list(lab=1:2),
pch=20,
cex=0.3,
las=1,
col=adjustcolor("black",0.2))
mtext("Good quality leaf on data", side=3, outer=F, cex = mainCex)
plot(data2aSp[data2aSp$quality_flag==1 & data2a$leaf_off_flag=="00" & data2a$year=="2021",],
mar=c(1,1,1,1),
pax=list(lab=1),
pch=20,
cex=0.3,
las=1,
col=adjustcolor("black",0.2))
mtext("2021 Good quality leaf on data", side=3, outer=F, cex = mainCex)
mtext("Latitude (deg)", side=2, outer=T, cex = labCex, las=0, line=1)
mtext("Longitude (deg)", side=1, outer=T, cex = labCex, line=0)
dev.off()
data_ha4 <- mask(data2aSp,extent4_latLon)
data_ha4_utm <- project(data_ha4, "epsg:32618")
data_ha4_utmPoly <- buffer(data_ha4_utm,width=12.5)
data_ha4_utmPoly_good <- data_ha4_utmPoly[data_ha4_utmPoly$quality_flag==1 & data_ha4_utmPoly$leaf_off_flag=="00" & data_ha4_utmPoly$year=="2021",]
data_ha4 <- mask(data2aSp,extent4_latLon)
data_ha4_utm <- project(data_ha4, "epsg:32618")
data_ha4_utmPoly <- buffer(data_ha4_utm,width=12.5)
data_ha4_utmPoly_good <- data_ha4_utmPoly[data_ha4_utmPoly$quality_flag==1 & data_ha4_utmPoly$leaf_off_flag=="00" & data_ha4_utmPoly$year=="2021",]
jpeg(filename = "Results/GEDI_ha4.jpeg",
width = 1100, height = 500, units = "px", pointsize = 36,
quality = 300)
par(mfrow=c(1,2),las=1,mar=c(0,0,0,0),oma=c(2,2,0,0))
plot(data_ha4_utmPoly,
ext = extent4_utm,
mar=c(1,1,1,1),
pax=list(lab=1:2),
las=1,
pch=20,
cex=1,
col=adjustcolor("black",0.5))
mtext("All data", side=3, outer=F, cex = mainCex)
plot(data_ha4_utmPoly_good,
ext = extent4_utm,
mar=c(1,1,1,1),
pax=list(lab=1),
pch=20,
cex=1,
col=adjustcolor("black",0.5))
mtext("2021 Good quality leaf on data", side=3, outer=F, cex = mainCex)
mtext("Easting (m)", side=2, outer=T, cex = labCex, las=0, line=1)
mtext("Northing (m)", side=1, outer=T, cex = labCex, line=0)
dev.off()
data_ha4_utmPoly_good
plot(data_ha4_utmPoly_good)
droneCtg <- catalog("Data/ha4/drone_ha4.laz")
for(i in 1:length(data_ha4_utmPoly_good)){
GEDI_clip <- clip_roi(droneCtg, st_as_sf(data_ha4_utmPoly_good[i,]))
writeLAS(GEDI_clip,paste0("Data/GEDI/GEDI_example",i,".laz"))
}
library(rGEDI)
goodShot <- data_ha4_utmPoly_good$shot_number[1]
# Get the shot number for the first good shot
goodShot <- data_ha4_utmPoly_good$shot_number[1]
# find correct file to read for 1b waveform
goodFile <- data1b[data1b$shot_number==goodShot,"fn"]
elevation <- data2a[data2a$shot_number==goodShot,"elev_lowestmode"]
elevation
data1B <- readLevel1B(goodFile) # both good ha 4 shots are in the same .h5 file
goodFile
# Get the shot number for the first good shot
goodShot <- data_ha4_utmPoly_good$shot_number[1]
# find correct file to read for 1b waveform
goodFile <- data1b[data1b$shot_number==goodShot,"fn"]
# edit the path for repository structure
# get the elevation value from the level 2A data
elevation <- data2a[data2a$shot_number==goodShot,"elev_lowestmode"]
data1B <- readLevel1B(goodFile) # both good ha 4 shots are in the same .h5 file
goodFile
?strsplit
# find correct file to read for 1b waveform
goodFile <- strsplit(data1b[data1b$shot_number==goodShot,"fn"], split = "/")
goodFile
# recollapse into a single path
goodFile <- paste(goodFile, sep="/")
# get file path and split into components
goodFile <- strsplit(data1b[data1b$shot_number==goodShot,"fn"], split = "/")
# edit the path for repository structure
goodFile[[1]][1] <- "Data/GEDI"
# recollapse into a single path
goodFile <- paste(goodFile, sep="/")
goodFile
# find correct file to read for 1b waveform
# get file path and split into components
goodFile <- strsplit(data1b[data1b$shot_number==goodShot,"fn"], split = "/")
goodFile
# edit the path for repository structure
goodFile[[1]][1] <- "Data/GEDI"
goodFile
goodFile <- strsplit(data1b[data1b$shot_number==goodShot,"fn"], split = "/")
# edit the path for repository structure
goodFile[[1]][1] <- "Data/GEDI"
# recollapse into a single path
goodFile <- paste(goodFile, collapse="/")
goodFile
# recollapse into a single path
goodFile <- paste(goodFile, collapse="")
goodFile
# get file path and split into components
goodFile <- strsplit(data1b[data1b$shot_number==goodShot,"fn"], split = "/")
# edit the path for repository structure
goodFile[[1]][1] <- "Data/GEDI"
# recollapse into a single path
goodFile <- paste(goodFile, collapse="")
goodFile
# get file path and split into components
goodFile <- strsplit(data1b[data1b$shot_number==goodShot,"fn"], split = "/")
# edit the path for repository structure
goodFile[[1]][1] <- "Data/GEDI"
goodFile
# recollapse into a single path
goodFile <- paste(goodFile[[1]], collapse="")
goodFile
# recollapse into a single path
goodFile <- paste(goodFile[[1]], collapse="/")
goodFile
# recollapse into a single path
goodFile <- paste(goodFile[[1]], collapse="\")
goodFile
)
# recollapse into a single path
goodFile <- paste(goodFile[[1]], collapse="/")
goodFile
goodFile <- paste(goodFile[[1]], collapse="/")
)
()
ecc
))
)
(
/
..
*
()
]]
test
^>
q()
