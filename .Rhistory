droneCat_leafOff <- catalog(droneFile_leafOff)
tlsCat <- catalog(tlsFile)
#### make terrain model ####
# use previously classified ALS data for entire ha 4
alsAll <- catalog("Data/ha4_data/als_ha4.laz")
dtm <- rasterize_terrain(alsAll, res = 1, algorithm = knnidw(k = 6L, p = 2))
# define voxel size
voxelSz <- 5
# create template
rastTemplate <- rast(nrows=45/voxelSz, ncols = 80/voxelSz,
xmin=0,xmax=80,
ymin=0,ymax=45)
?lidR::LAD
# read lidar data
data <- readLAS(droneFile_leafOff)
# subtract ground height
dataNorm <- normalize_height(data, dtm)
Z
# 2D POINT DENSITY
# calculate voxel point density
voxel_droneLO <- voxel_metrics(dataNorm, ~list(N = length(Z)), 5, all_voxels = T)
# replace "NA" values with 0
voxel_droneLO[is.na(voxel_droneLO$N),"N"] <- 0
# creates 2 "layers", recombine into one
voxel_droneLO <- aggregate(N~X+Z, data = voxel_droneLO, sum)
# scale to pts/m3
voxel_droneLO$pts_m3 <- voxel_droneLO$N/25
# rescale X values
voxel_droneLO$Xplot <- voxel_droneLO$X - 364560
voxel_droneLO$Yplot <- voxel_droneLO$Z + 2.5
voxel_droneLO_vect <- vect(voxel_droneLO,
geom=c("Xplot", "Yplot"))
densRast_droneLO <- terra::rasterize(voxel_droneLO_vect,rastTemplate, field="pts_m3")
# CANOPY HEIGHT
chm_droneLO <- rasterize_canopy(dataNorm, res=0.25,
algorithm = p2r(subcircle=0.01))
# only keep first returns, and remove points < 1 m height
dataNormVeg <- dataNorm[dataNorm$Z>=1 & dataNorm$ReturnNumber==1,]
# re-calculate voxel point density
voxel_droneLO_pai <- voxel_metrics(dataNormVeg, ~list(N = length(Z)), voxelSz, all_voxels = T)
# replace "NA" values with 0
voxel_droneLO_pai[is.na(voxel_droneLO_pai$N),"N"] <- 0
# creates 2 "layers", recombine into one
voxel_droneLO_pai <- aggregate(N~X+Z, data = voxel_droneLO_pai, sum)
# scale to pts/m3
voxel_droneLO_pai[voxel_droneLO_pai$Z>0,"pts_m3"] <- voxel_droneLO_pai[voxel_droneLO_pai$Z>0,"N"]/(voxelSz*voxelSz*voxelSz)
# account for removing points < 1 m height
voxel_droneLO_pai[voxel_droneLO_pai$Z==0,"pts_m3"] <- voxel_droneLO_pai[voxel_droneLO_pai$Z==0,"N"]/((voxelSz-1)*voxelSz*voxelSz)
# rescale X values
voxel_droneLO_pai$Xplot <- voxel_droneLO_pai$X - 364560
voxel_droneLO_pai$Yplot <- voxel_droneLO_pai$Z + 2.5
# Use McArthur Horn to estimate effective PAI
ePAI_droneLO <- MH_PAI(X=voxel_droneLO_pai$Xplot,
Y=1,
Z=voxel_droneLO_pai$Yplot,
N=voxel_droneLO_pai$pts_m3,
type="air")
# define function to calculate PAI using MacArthur Horn method
MH_PAI <- function(X,Y,Z,N,type="air"){
# combine into data frame
dataPoints <- data.frame(X,Y,Z,N)
dataPoints$XY <- paste(X,Y,sep="-")
dataPoints$ePAI <- NA
# get unique X,Y columns of voxels
uniqueXY <- unique(dataPoints$XY)
for(i in 1:length(uniqueXY)){
data_i <- dataPoints[dataPoints$XY==uniqueXY[i],]
# order by height depending on observation type
if(type=="air"){
# "top to bottom" for airborne
data_i <- data_i[order(-data_i$Z),]
}
if(type=="ground"){
# "bottom to top" for ground
data_i <- data_i[order(data_i$Z),]
}
for(j in 1:nrow(data_i)){
pulseIn <- sum(data_i$N[j:nrow(data_i)])
pulseOut <- sum(data_i$N[(j+1):nrow(data_i)])
if(j==nrow(data_i)){
pulseOut <- 0
}
dataPoints[dataPoints$XY==uniqueXY[i] & dataPoints$Z==data_i$Z[j],"ePAI"] <- log(pulseIn/pulseOut)
if(pulseIn==0|pulseOut==0){
dataPoints[dataPoints$XY==uniqueXY[i] & dataPoints$Z==data_i$Z[j],"ePAI"] <- 0
}
}
}
return(dataPoints)
}
# only keep first returns, and remove points < 1 m height
dataNormVeg <- dataNorm[dataNorm$Z>=1 & dataNorm$ReturnNumber==1,]
# re-calculate voxel point density
voxel_droneLO_pai <- voxel_metrics(dataNormVeg, ~list(N = length(Z)), voxelSz, all_voxels = T)
# replace "NA" values with 0
voxel_droneLO_pai[is.na(voxel_droneLO_pai$N),"N"] <- 0
# creates 2 "layers", recombine into one
voxel_droneLO_pai <- aggregate(N~X+Z, data = voxel_droneLO_pai, sum)
# scale to pts/m3
voxel_droneLO_pai[voxel_droneLO_pai$Z>0,"pts_m3"] <- voxel_droneLO_pai[voxel_droneLO_pai$Z>0,"N"]/(voxelSz*voxelSz*voxelSz)
# account for removing points < 1 m height
voxel_droneLO_pai[voxel_droneLO_pai$Z==0,"pts_m3"] <- voxel_droneLO_pai[voxel_droneLO_pai$Z==0,"N"]/((voxelSz-1)*voxelSz*voxelSz)
# rescale X values
voxel_droneLO_pai$Xplot <- voxel_droneLO_pai$X - 364560
voxel_droneLO_pai$Yplot <- voxel_droneLO_pai$Z + 2.5
# Use McArthur Horn to estimate effective PAI
ePAI_droneLO <- MH_PAI(X=voxel_droneLO_pai$Xplot,
Y=1,
Z=voxel_droneLO_pai$Yplot,
N=voxel_droneLO_pai$pts_m3,
type="air")
pai_droneLO_vect <- vect(ePAI_droneLO,
geom=c("X", "Z"))
paiRast_droneLO <- terra::rasterize(paiRast_droneLO,rastTemplate, field="ePAI")
paiRast_droneLO <- terra::rasterize(pai_droneLO_vect,rastTemplate, field="ePAI")
chm_mls
#### packages ####
library("lidR")
library("terra")
#### setup ####
# Define file path for MLS, ALS, and drone lidar files
mlsFile <- "Data/transect/transect_mls.laz"
alsFile <- "Data/transect/transect_als.laz"
droneFile <- "Data/transect/transect_drone.laz"
droneFile_leafOff <- "Data/transect/transect_drone_leafoff.laz"
tlsFile <- "Data/transect/tls/"
# Make lidR catalog objects
mlsCat <- catalog(mlsFile)
alsCat <- catalog(alsFile)
droneCat <- catalog(droneFile)
droneCat_leafOff <- catalog(droneFile_leafOff)
tlsCat <- catalog(tlsFile)
#### make terrain model ####
# use previously classified ALS data for entire ha 4
alsAll <- catalog("Data/ha4_data/als_ha4.laz")
dtm <- rasterize_terrain(alsAll, res = 1, algorithm = knnidw(k = 6L, p = 2))
#### Calculate summary stats of transects ####
#  Make raster template for voxelized point count/density
# define voxel size
voxelSz <- 5
# create template
rastTemplate <- rast(nrows=45/voxelSz, ncols = 80/voxelSz,
xmin=0,xmax=80,
ymin=0,ymax=45)
# define function to calculate PAI using MacArthur Horn method
MH_PAI <- function(X,Y,Z,N,type="air"){
# combine into data frame
dataPoints <- data.frame(X,Y,Z,N)
dataPoints$XY <- paste(X,Y,sep="-")
dataPoints$ePAI <- NA
# get unique X,Y columns of voxels
uniqueXY <- unique(dataPoints$XY)
for(i in 1:length(uniqueXY)){
data_i <- dataPoints[dataPoints$XY==uniqueXY[i],]
# order by height depending on observation type
if(type=="air"){
# "top to bottom" for airborne
data_i <- data_i[order(-data_i$Z),]
}
if(type=="ground"){
# "bottom to top" for ground
data_i <- data_i[order(data_i$Z),]
}
for(j in 1:nrow(data_i)){
pulseIn <- sum(data_i$N[j:nrow(data_i)])
pulseOut <- sum(data_i$N[(j+1):nrow(data_i)])
if(j==nrow(data_i)){
pulseOut <- 0
}
dataPoints[dataPoints$XY==uniqueXY[i] & dataPoints$Z==data_i$Z[j],"ePAI"] <- log(pulseIn/pulseOut)
if(pulseIn==0|pulseOut==0){
dataPoints[dataPoints$XY==uniqueXY[i] & dataPoints$Z==data_i$Z[j],"ePAI"] <- 0
}
}
}
return(dataPoints)
}
### ALS
# read lidar data
data <- readLAS(alsFile)
# subtract ground height
dataNorm <- normalize_height(data, dtm)
# 2D POINT DENSITY
# calculate voxel point density
voxel_als <- voxel_metrics(dataNorm, ~list(N = length(Z)), voxelSz, all_voxels = T)
# replace "NA" values with 0
voxel_als[is.na(voxel_als$N),"N"] <- 0
# creates 2 "layers", recombine into one
voxel_als <- aggregate(N~X+Z, data = voxel_als, sum)
# scale to pts/m3
voxel_als$pts_m3 <- voxel_als$N/(voxelSz^3)
# rescale X values
voxel_als$Xplot <- voxel_als$X - 364560
voxel_als$Yplot <- voxel_als$Z + 2.5
voxel_als_vect <- vect(voxel_als,
geom=c("Xplot", "Yplot"))
densRast_als <- terra::rasterize(voxel_als_vect,rastTemplate, field="pts_m3")
# CANOPY HEIGHT
chm_als <- rasterize_canopy(dataNorm, res=0.25,
algorithm = p2r(subcircle=0.01))
# Voxelized effective PAI
# only keep first returns, and remove points < 2 m height
dataNormVeg <- dataNorm[dataNorm$Z>=1 & dataNorm$ReturnNumber==1,]
# re-calculate voxel point density
voxel_als_pai <- voxel_metrics(dataNormVeg, ~list(N = length(Z)), voxelSz, all_voxels = T)
# replace "NA" values with 0
voxel_als_pai[is.na(voxel_als_pai$N),"N"] <- 0
# creates 2 "layers", recombine into one
voxel_als_pai <- aggregate(N~X+Z, data = voxel_als_pai, sum)
# scale to pts/m3
voxel_als_pai[voxel_als_pai$Z>0,"pts_m3"] <- voxel_als_pai[voxel_als_pai$Z>0,"N"]/(voxelSz*voxelSz*voxelSz)
# account for removing points < 1 m height
voxel_als_pai[voxel_als_pai$Z==0,"pts_m3"] <- voxel_als_pai[voxel_als_pai$Z==0,"N"]/((voxelSz-1)*voxelSz*voxelSz)
# rescale X values
voxel_als_pai$Xplot <- voxel_als_pai$X - 364560
voxel_als_pai$Yplot <- voxel_als_pai$Z + 2.5
# Use McArthur Horn to estimate effective PAI
ePAI_als <- MH_PAI(X=voxel_als_pai$Xplot,
Y=1,
Z=voxel_als_pai$Yplot,
N=voxel_als_pai$pts_m3,
type="air")
pai_als_vect <- vect(ePAI_als,
geom=c("X", "Z"))
paiRast_als <- terra::rasterize(pai_als_vect,rastTemplate, field="ePAI")
### Drone - leaf on
# read lidar data
data <- readLAS(droneFile)
# subtract ground height
dataNorm <- normalize_height(data, dtm)
# 2D POINT DENSITY
# calculate voxel point density
voxel_drone <- voxel_metrics(dataNorm, ~list(N = length(Z)), 5, all_voxels = T)
# replace "NA" values with 0
voxel_drone[is.na(voxel_drone$N),"N"] <- 0
# creates 2 "layers", recombine into one
voxel_drone <- aggregate(N~X+Z, data = voxel_drone, sum)
# scale to pts/m3
voxel_drone$pts_m3 <- voxel_drone$N/25
# rescale X values
voxel_drone$Xplot <- voxel_drone$X - 364560
voxel_drone$Yplot <- voxel_drone$Z + 2.5
voxel_drone_vect <- vect(voxel_drone,
geom=c("Xplot", "Yplot"))
densRast_drone <- terra::rasterize(voxel_drone_vect,rastTemplate, field="pts_m3")
# CANOPY HEIGHT
chm_drone <- rasterize_canopy(dataNorm, res=0.25,
algorithm = p2r(subcircle=0.01))
# Voxelized effective PAI
# only keep first returns, and remove points < 1 m height
dataNormVeg <- dataNorm[dataNorm$Z>=1 & dataNorm$ReturnNumber==1,]
# re-calculate voxel point density
voxel_drone_pai <- voxel_metrics(dataNormVeg, ~list(N = length(Z)), voxelSz, all_voxels = T)
# replace "NA" values with 0
voxel_drone_pai[is.na(voxel_drone_pai$N),"N"] <- 0
# creates 2 "layers", recombine into one
voxel_drone_pai <- aggregate(N~X+Z, data = voxel_drone_pai, sum)
# scale to pts/m3
voxel_drone_pai[voxel_drone_pai$Z>0,"pts_m3"] <- voxel_drone_pai[voxel_drone_pai$Z>0,"N"]/(voxelSz*voxelSz*voxelSz)
# account for removing points < 1 m height
voxel_drone_pai[voxel_drone_pai$Z==0,"pts_m3"] <- voxel_drone_pai[voxel_drone_pai$Z==0,"N"]/((voxelSz-1)*voxelSz*voxelSz)
# rescale X values
voxel_drone_pai$Xplot <- voxel_drone_pai$X - 364560
voxel_drone_pai$Yplot <- voxel_drone_pai$Z + 2.5
# Use McArthur Horn to estimate effective PAI
ePAI_drone <- MH_PAI(X=voxel_drone_pai$Xplot,
Y=1,
Z=voxel_drone_pai$Yplot,
N=voxel_drone_pai$pts_m3,
type="air")
pai_drone_vect <- vect(ePAI_drone,
geom=c("X", "Z"))
paiRast_drone <- terra::rasterize(pai_drone_vect,rastTemplate, field="ePAI")
### Drone - leaf off
# read lidar data
data <- readLAS(droneFile_leafOff)
# subtract ground height
dataNorm <- normalize_height(data, dtm)
# 2D POINT DENSITY
# calculate voxel point density
voxel_droneLO <- voxel_metrics(dataNorm, ~list(N = length(Z)), 5, all_voxels = T)
# replace "NA" values with 0
voxel_droneLO[is.na(voxel_droneLO$N),"N"] <- 0
# creates 2 "layers", recombine into one
voxel_droneLO <- aggregate(N~X+Z, data = voxel_droneLO, sum)
# scale to pts/m3
voxel_droneLO$pts_m3 <- voxel_droneLO$N/25
# rescale X values
voxel_droneLO$Xplot <- voxel_droneLO$X - 364560
voxel_droneLO$Yplot <- voxel_droneLO$Z + 2.5
voxel_droneLO_vect <- vect(voxel_droneLO,
geom=c("Xplot", "Yplot"))
densRast_droneLO <- terra::rasterize(voxel_droneLO_vect,rastTemplate, field="pts_m3")
# CANOPY HEIGHT
chm_droneLO <- rasterize_canopy(dataNorm, res=0.25,
algorithm = p2r(subcircle=0.01))
# Voxelized effective PAI
# only keep first returns, and remove points < 1 m height
dataNormVeg <- dataNorm[dataNorm$Z>=1 & dataNorm$ReturnNumber==1,]
# re-calculate voxel point density
voxel_droneLO_pai <- voxel_metrics(dataNormVeg, ~list(N = length(Z)), voxelSz, all_voxels = T)
# replace "NA" values with 0
voxel_droneLO_pai[is.na(voxel_droneLO_pai$N),"N"] <- 0
# creates 2 "layers", recombine into one
voxel_droneLO_pai <- aggregate(N~X+Z, data = voxel_droneLO_pai, sum)
# scale to pts/m3
voxel_droneLO_pai[voxel_droneLO_pai$Z>0,"pts_m3"] <- voxel_droneLO_pai[voxel_droneLO_pai$Z>0,"N"]/(voxelSz*voxelSz*voxelSz)
# account for removing points < 1 m height
voxel_droneLO_pai[voxel_droneLO_pai$Z==0,"pts_m3"] <- voxel_droneLO_pai[voxel_droneLO_pai$Z==0,"N"]/((voxelSz-1)*voxelSz*voxelSz)
# rescale X values
voxel_droneLO_pai$Xplot <- voxel_droneLO_pai$X - 364560
voxel_droneLO_pai$Yplot <- voxel_droneLO_pai$Z + 2.5
# Use McArthur Horn to estimate effective PAI
ePAI_droneLO <- MH_PAI(X=voxel_droneLO_pai$Xplot,
Y=1,
Z=voxel_droneLO_pai$Yplot,
N=voxel_droneLO_pai$pts_m3,
type="air")
pai_droneLO_vect <- vect(ePAI_droneLO,
geom=c("X", "Z"))
paiRast_droneLO <- terra::rasterize(pai_droneLO_vect,rastTemplate, field="ePAI")
### MLS
# read lidar data
data <- readLAS(mlsFile)
# subtract ground height
dataNorm <- normalize_height(data, dtm)
# 2D POINT DENSITY
# calculate voxel point density
voxel_mls <- voxel_metrics(dataNorm, ~list(N = length(Z)), 5, all_voxels = T)
# replace "NA" values with 0
voxel_mls[is.na(voxel_mls$N),"N"] <- 0
# creates 2 "layers", recombine into one
voxel_mls <- aggregate(N~X+Z, data = voxel_mls, sum)
# scale to pts/m3
voxel_mls$pts_m3 <- voxel_mls$N/25
# rescale X values
voxel_mls$Xplot <- voxel_mls$X - 364560
voxel_mls$Yplot <- voxel_mls$Z + 2.5
voxel_mls_vect <- vect(voxel_mls,
geom=c("Xplot", "Yplot"))
densRast_mls <- terra::rasterize(voxel_mls_vect,rastTemplate, field="pts_m3")
# CANOPY HEIGHT
chm_mls <- rasterize_canopy(dataNorm, res=0.25,
algorithm = p2r(subcircle=0.01))
# Voxelized effective PAI
# only keep first returns, and remove points < 1 m height
dataNormVeg <- dataNorm[dataNorm$Z>=1 & dataNorm$ReturnNumber==1,]
# re-calculate voxel point density
voxel_mls_pai <- voxel_metrics(dataNormVeg, ~list(N = length(Z)), voxelSz, all_voxels = T)
# replace "NA" values with 0
voxel_mls_pai[is.na(voxel_mls_pai$N),"N"] <- 0
# creates 2 "layers", recombine into one
voxel_mls_pai <- aggregate(N~X+Z, data = voxel_mls_pai, sum)
# scale to pts/m3
voxel_mls_pai[voxel_mls_pai$Z>0,"pts_m3"] <- voxel_mls_pai[voxel_mls_pai$Z>0,"N"]/(voxelSz*voxelSz*voxelSz)
# account for removing points < 1 m height
voxel_mls_pai[voxel_mls_pai$Z==0,"pts_m3"] <- voxel_mls_pai[voxel_mls_pai$Z==0,"N"]/((voxelSz-1)*voxelSz*voxelSz)
# rescale X values
voxel_mls_pai$Xplot <- voxel_mls_pai$X - 364560
voxel_mls_pai$Yplot <- voxel_mls_pai$Z + 2.5
# Use McArthur Horn to estimate effective PAI
ePAI_mls <- MH_PAI(X=voxel_mls_pai$Xplot,
Y=1,
Z=voxel_mls_pai$Yplot,
N=voxel_mls_pai$pts_m3,
type="ground")
pai_mls_vect <- vect(ePAI_mls,
geom=c("X", "Z"))
paiRast_mls <- terra::rasterize(pai_mls_vect,rastTemplate, field="ePAI")
### TLS
# read lidar data
data <- readLAS(tlsCat)
# subtract ground height
dataNorm <- normalize_height(data, dtm)
# 2D POINT DENSITY
# calculate voxel point density
voxel_tls <- voxel_metrics(dataNorm, ~list(N = length(Z)), 5, all_voxels = T)
# replace "NA" values with 0
voxel_tls[is.na(voxel_tls$N),"N"] <- 0
# creates 2 "layers", recombine into one
voxel_tls <- aggregate(N~X+Z, data = voxel_tls, sum)
# scale to pts/m3
voxel_tls$pts_m3 <- voxel_tls$N/25
# rescale X values
voxel_tls$Xplot <- voxel_tls$X - 364560
voxel_tls$Yplot <- voxel_tls$Z + 2.5
voxel_tls_vect <- vect(voxel_tls,
geom=c("Xplot", "Yplot"))
densRast_tls <- terra::rasterize(voxel_tls_vect,rastTemplate, field="pts_m3")
# CANOPY HEIGHT
chm_tls <- rasterize_canopy(dataNorm, res=0.25,
algorithm = p2r(subcircle=0.01))
# Voxelized effective PAI
# only keep first returns, and remove points < 2 m height
dataNormVeg <- dataNorm[dataNorm$Z>=1 & dataNorm$ReturnNumber==1,]
# re-calculate voxel point density
voxel_tls_pai <- voxel_metrics(dataNormVeg, ~list(N = length(Z)), voxelSz, all_voxels = T)
# replace "NA" values with 0
voxel_tls_pai[is.na(voxel_tls_pai$N),"N"] <- 0
# creates 2 "layers", recombine into one
voxel_tls_pai <- aggregate(N~X+Z, data = voxel_tls_pai, sum)
# scale to pts/m3
voxel_tls_pai[voxel_tls_pai$Z>0,"pts_m3"] <- voxel_tls_pai[voxel_tls_pai$Z>0,"N"]/(voxelSz*voxelSz*voxelSz)
# account for removing points < 1 m height
voxel_tls_pai[voxel_tls_pai$Z==0,"pts_m3"] <- voxel_tls_pai[voxel_tls_pai$Z==0,"N"]/((voxelSz-1)*voxelSz*voxelSz)
# rescale X values
voxel_tls_pai$Xplot <- voxel_tls_pai$X - 364560
voxel_tls_pai$Yplot <- voxel_tls_pai$Z + 2.5
# Use McArthur Horn to estimate effective PAI
ePAI_tls <- MH_PAI(X=voxel_tls_pai$Xplot,
Y=1,
Z=voxel_tls_pai$Yplot,
N=voxel_tls_pai$pts_m3,
type="ground")
pai_tls_vect <- vect(ePAI_tls,
geom=c("X", "Z"))
paiRast_tls <- terra::rasterize(pai_tls_vect,rastTemplate, field="ePAI")
transectSummary <- data.frame(instrument = c("Airplane lidar",
"Drone lidar (leaf on)",
"Drone lidar (leaf off)",
"Mobile lidar",
"Terrestrial lidar"),
pointDensity = NA,
meanCanopyHeight = NA,
canopyRugosity = NA, # calculated a la https://www.sciencedirect.com/science/article/abs/pii/S0378112713001254?via%3Dihub
meanLAI = NA)
# Airplane
transectSummary$pointDensity[1] <- round(alsCat$Number.of.point.records/(80*5))
transectSummary$meanCanopyHeight[1] <- round(mean(values(chm_als),na.rm=T),1)
transectSummary$canopyRugosity[1] <- round(sd(aggregate(ePAI_als$ePAI, by=list(ePAI_als$X), FUN="sd")[,2]),2)
transectSummary$meanLAI[1] <- round(mean(aggregate(ePAI_als$ePAI, by=list(ePAI_als$X), FUN="sum")[,2]),2)
# Drone - leaf on
transectSummary$pointDensity[2] <- round(droneCat$Number.of.point.records/(80*5))
transectSummary$meanCanopyHeight[2] <- round(mean(values(chm_drone),na.rm=T),1)
transectSummary$canopyRugosity[2] <- round(sd(aggregate(ePAI_drone$ePAI, by=list(ePAI_drone$X), FUN="sd")[,2]),2)
transectSummary$meanLAI[2] <- round(mean(aggregate(ePAI_drone$ePAI, by=list(ePAI_drone$X), FUN="sum")[,2]),2)
# Drone - leaf off
transectSummary$pointDensity[3] <- round(droneCat_leafOff$Number.of.point.records/(80*5))
transectSummary$meanCanopyHeight[3] <- round(mean(values(chm_droneLO),na.rm=T),1)
transectSummary$canopyRugosity[3] <- round(sd(aggregate(ePAI_droneLO$ePAI, by=list(ePAI_droneLO$X), FUN="sd")[,2]),2)
transectSummary$meanLAI[3] <- round(mean(aggregate(ePAI_droneLO$ePAI, by=list(ePAI_droneLO$X), FUN="sum")[,2]),2)
# Mobile
transectSummary$pointDensity[4] <- round(mlsCat$Number.of.point.records/(80*5))
transectSummary$meanCanopyHeight[4] <- round(mean(values(chm_mls),na.rm=T),1)
transectSummary$canopyRugosity[4] <- round(sd(aggregate(ePAI_mls$ePAI, by=list(ePAI_mls$X), FUN="sd")[,2]),2)
transectSummary$meanLAI[4] <- round(mean(aggregate(ePAI_mls$ePAI, by=list(ePAI_mls$X), FUN="sum")[,2]),2)
# TLS
transectSummary$pointDensity[5] <- round(sum(tlsCat$Number.of.point.records)/(80*5))
transectSummary$meanCanopyHeight[5] <- round(mean(values(chm_tls),na.rm=T),1)
transectSummary$canopyRugosity[5] <- round(sd(aggregate(ePAI_tls$ePAI, by=list(ePAI_tls$X), FUN="sd")[,2]),2)
transectSummary$meanLAI[5] <- round(mean(aggregate(ePAI_tls$ePAI, by=list(ePAI_tls$X), FUN="sum")[,2]),2)
transectSummary
transectSummary <- data.frame(instrument = c("Airplane lidar",
"Drone lidar (leaf on)",
"Drone lidar (leaf off)",
"Mobile lidar",
"Terrestrial lidar"),
pointDensity = NA,
meanCanopyHeight = NA,
canopyRugosity = NA, # calculated a la https://www.sciencedirect.com/science/article/abs/pii/S0378112713001254?via%3Dihub
meanLAI = NA)
# Airplane
transectSummary$pointDensity[1] <- round(alsCat$Number.of.point.records/(80*5))
transectSummary$meanCanopyHeight[1] <- round(mean(values(chm_als),na.rm=T),1)
transectSummary$canopyRugosity[1] <- round(sd(aggregate(ePAI_als$ePAI, by=list(ePAI_als$X), FUN="sd")[,2]),2)
transectSummary$meanLAI[1] <- round(mean(aggregate(ePAI_als$ePAI, by=list(ePAI_als$X), FUN="sum")[,2]),2)
# Drone - leaf on
transectSummary$pointDensity[2] <- round(droneCat$Number.of.point.records/(80*5))
transectSummary$meanCanopyHeight[2] <- round(mean(values(chm_drone),na.rm=T),1)
transectSummary$canopyRugosity[2] <- round(sd(aggregate(ePAI_drone$ePAI, by=list(ePAI_drone$X), FUN="sd")[,2]),2)
transectSummary$meanLAI[2] <- round(mean(aggregate(ePAI_drone$ePAI, by=list(ePAI_drone$X), FUN="sum")[,2]),2)
# Drone - leaf off
transectSummary$pointDensity[3] <- round(droneCat_leafOff$Number.of.point.records/(80*5))
transectSummary$meanCanopyHeight[3] <- round(mean(values(chm_droneLO),na.rm=T),1)
transectSummary$canopyRugosity[3] <- "--"
transectSummary$meanLAI[3] <- "--"
# Mobile
transectSummary$pointDensity[4] <- round(mlsCat$Number.of.point.records/(80*5))
transectSummary$meanCanopyHeight[4] <- round(mean(values(chm_mls),na.rm=T),1)
transectSummary$canopyRugosity[4] <- round(sd(aggregate(ePAI_mls$ePAI, by=list(ePAI_mls$X), FUN="sd")[,2]),2)
transectSummary$meanLAI[4] <- round(mean(aggregate(ePAI_mls$ePAI, by=list(ePAI_mls$X), FUN="sum")[,2]),2)
# TLS
transectSummary$pointDensity[5] <- round(sum(tlsCat$Number.of.point.records)/(80*5))
transectSummary$meanCanopyHeight[5] <- round(mean(values(chm_tls),na.rm=T),1)
transectSummary$canopyRugosity[5] <- round(sd(aggregate(ePAI_tls$ePAI, by=list(ePAI_tls$X), FUN="sd")[,2]),2)
transectSummary$meanLAI[5] <- round(mean(aggregate(ePAI_tls$ePAI, by=list(ePAI_tls$X), FUN="sum")[,2]),2)
write.csv(transectSummary,"Results/transectSummaryStats.csv",row.names = F)
# calculate % variation in mean canopy height
round(100*(max(transectSummary$meanCanopyHeight)-min(transectSummary$meanCanopyHeight))/min(transectSummary$meanCanopyHeight),1)
# calculate % variation in canopy rugosity
round(100*(max(transectSummary$canopyRugosity)-min(transectSummary$canopyRugosity))/min(transectSummary$canopyRugosity),1)
# calculate % variation in mean canopy height
round(100*(max(transectSummary$meanCanopyHeight)-min(transectSummary$meanCanopyHeight))/min(transectSummary$meanCanopyHeight),1)
# calculate % variation in canopy rugosity
round(100*(max(transectSummary$canopyRugosity,na.rm=T)-min(transectSummary$canopyRugosity,na.rm=T))/min(transectSummary$canopyRugosity,na.rm=T),1)
max(transectSummary$canopyRugosity,na.rm=T)
transectSummary$canopyRugosity
transectSummary$canopyRugosity <- as.numeric(transectSummary$canopyRugosity)
transectSummary$meanLAI <- as.numeric(meanLAI$canopyRugosity)
transectSummary$canopyRugosity <- as.numeric(transectSummary$canopyRugosity)
transectSummary$meanLAI <- as.numeric(meanLAI$canopyRugosity)
r
transectSummary$canopyRugosity <- as.numeric(transectSummary$canopyRugosity)
transectSummary$meanLAI <- as.numeric(transectSummary$meanLAI)
# calculate % variation in mean canopy height
round(100*(max(transectSummary$meanCanopyHeight)-min(transectSummary$meanCanopyHeight))/min(transectSummary$meanCanopyHeight),1)
# calculate % variation in canopy rugosity
round(100*(max(transectSummary$canopyRugosity,na.rm=T)-min(transectSummary$canopyRugosity,na.rm=T))/min(transectSummary$canopyRugosity,na.rm=T),1)
# calculate % variation in mean LAI
round(100*(max(transectSummary$meanLAI,na.rm=T)-min(transectSummary$meanLAI,na.rm=T))/min(transectSummary$meanLAI,na.rm=T),1)
transectSummary
write.csv(transectSummary,"Results/transectSummaryStats.csv",row.names = F)
